WAL: write ahead logging. All writes are applied to a log and then commited, via transaction. The log maintains information on how to undo in case of a crash.
LSM: Log-structured merge tree. Uses faster storage media as a sort of buffer. Updates are written to a log file. Uses checkpointing to restore upon a failure. Replay the log up to a certain point, the checkpoint. page 24.
Sp: may mean stack pointer. Whatever it is, it uses COW

YCSB_benchmark.cpp line 260. The engine::update function causes recovery to hang forever.

Commenting out the update function call causes recovery to actually terminate. However, any benchmark run afterwards fails due to an issue with the pm region. So, it DOES persist between runs.

Opt_* may refer to the nvm-aware engines.

opt_sp_engine.cpp uses a struct with a prefix of "cow".

Set default values and run.sh params the same. -u, which enables a single update, causes the original nstore to violate an assertion and fail. Does not fail in nstore-homo. Removed the -u flag from each and they both run. This flag sets an update_once field to true. In Ycsb_benchmark, the constructor calls assert(0) if it is set to true. So, it will always fail no matter what. nstore-homo does not have this assertion. try removing assertion.

Nstore-homo can recover. Nstore cannot.


report: all diferences between the two and explain why.why whisper needs to make these changes. one section

understand homo code and sim crash, the meaning. Explain what sim crash does with confidence. Also what the original recovery workste oringial design then explain whisper differences. verify if recovery is correct or not, depends on corruption mechanism. understand sim crash and then write a similar tool to corrupt it.

two sections: one on whisper and one on homo

write own workload, under my control with any amount and content of key value pairs.
inject corruption ( look at sim crash)
	just make it inconsistent
then run recovery (theirs)
then print table and see

Engine::recovery runs recovery and then resumes the workload. Recovery simply undoes the log.

NOTE: Calling sim_crash causes the reported throughput value to be wrong (11111.111 or 33333.333... etc...)

INITIALIZATION OF TABLE:
Records are created and inserted. The key is a numerical value from 0 to n. The value is meant to be assigned randomly [a-z][A-Z][0-9] with the number of chars equal to the ycsb_field_size. It is not random,it is the same "random" sequence each execution. The record is created with n fields, each of which are populated with the same random variable. The pointer to the new record gets passed into its statement.h, and then engine::load is where the record is inserted. Statement.h identifies which statment (ins, del, upd, sel) and sets the proper vars. Then, engine::load logs the op and then activates the record.

A statement consists of operations: insert, delete, update, and select.

engine::load is where the statments are executed. Should fault inject here.

A larger amount of keys yields a larger amount of zipf dist. Tables do not persist between executions.

simcrash updates a random key value pair with the value 'x', then calls recovery. The update doesnt violate anything so im not sure how recovery works. 'x' is included in the random char generator, so a valid key can hold that value.

TODO: insert print statements into engine file to see if recovery actually goes through all code

Simcrash in load: calling sim crash after each record is created and then inserted causes the insertion to be called of, because it crashes in a transaction. This can verified y printing the table after each insert operation. Calling it aftter ee->txn_end() results in no data loss, as the transaction operates as intended. An anaylsis of the undo log using print statements verifies that log does what its supposed to do. I do not believe simcrash to cause any corruption. It does overwrite the record with a record full of 'x', but it doesnt actually commit as its undone. I assume their corruption mechanism is to simply show that anything not commited after simcrash is called is not commited.

For YCSB the default engine is optwal.
the -w eables optwal, look for it in the run file

The program logs inserts/updates/ect... using https://www.codeproject.com/Tips/987850/Logging-in-Cplusplus
	its a logging framework.

BEGIN LOGGING STUFF IN RECORDER

for load: Create string from inserted record, store
Update: same thing
Read: insert and assignment to a string inside the timer wrap

the zipf dist used to randomly pick a key for reading is bugged. it generates some insane numbers

9/5: Added logic to determine if the masterlog needs to be generated or not. This ensures that the run intended to rebuild the table from the desired log doesnt just overwrrite the existing log.
9/5: Removed above logic. Added cmd argument to trigger recording in masterlog. Default is to currentlog. -n flag causes masterlog to become the current run, otherwise it isnt touched.
Added some logic to prevent a user from both recording the masterlog and rebuilding from it
Added code to recognize where to rebuild the table from the masterlog. Created prototype function and placed it.TODO: in the function, just insert 15 records to the table and observer. then, create based on text file.

Figures: Overhead it incurs


Testing consistency: Macro = replaying up and stopping between app-level things. like between record pointer creation and actual statment execution
	             Micro = replaying up to the allocation, and then stopping somewhere in that process. Mess with pmemalloc.

